---
layout: post
title:  vue.js 정리하기
categories: vue
---

일본에서 웹 솔루션 회사를 다닐적에 연수 중 첫 어플리케이션을 react 로 만들었습니다.      
그래서인가 react 를 개인적으로 각별히 생각하고 있습니다. vue 에 대해서는 어렴풋이 알고는 있지만 항상 뒷전이였어요. 
      
하지만, 어느새부턴가 react 보다 vue 를 더 많이 다루게 되었습니다. 언젠가 잊어버려도 
이 글을 읽으면 다시 이해할 수 있게 vue 에 대해서 핵심만 요약하여 정리합니다.

---

### 시작하기

```js
// vue3
import { createApp } from 'vue';
import App from 'App.vue';
const app = createApp(App); 
app.mount('#app');

// vue2
var vue = new Vue({
    el: '#app',
    ...
});
```

### computed
> `method` 와 다른점은 연관 데이터를 캐싱되어  실행

```html
<template>    
    <div>
        <label>당신의 이름은 ?</label>
        <input v-model="myname"/>
        <h1>{{ myname }}</h1>
    </div>
    <div>
        <label>레퍼런스 찾아보면 되는데 왜 필기하나요 ?</label>
        <input v-model="answer"/>
        <h1>{{ myanswer }}</h1>
    </div>
</template>
<script>
export default {
    data() {
        myname: 'yuu2dev',
        answer: '',
    },
    computed: {
        myanswer() {
            return '제가 입력한 값은: ' + this.answer;
        }
    }
}
</script>
```

`computed` 프로퍼티는 `methods` 와 같은 듯 보이나 다른 점이 있습니다. 바로 의존하고 있는 데이터가 변경되는 경우에만 재연산된다는 점입니다.     
위 예제에서는 `this.answer` 를 의존하고 있는 데 이 값이 변경되는 경우에만 `myanswer`가 실행됩니다.
`computed` 프로퍼티를 사용 할 때에는 괄호를 붙여서는 안됩니다.    
무언가를 출력하고자 할 때 주로 사용합니다.    

### component
> 재사용하기 위한 부품 !

```js
// 전역 방식
import ExpComponent from './components/ExpComponent.vue';

app.component('exp-component' ExpComponent);
app.mount('#app');

// 지역 방식
import ExpComponent from './components/ExpComponent';
export default () {
    components: {
        ExpComponent
    }, 
}
```

### props
> 컴포넌트의 속성

```html
# App.vue
<custom-button link to="/contact"></custom-button>

# CustomButton.vue
<template>
    <router-link v-if="link" :to="to">{{ label }}</router-link>
    <button v-eles>{{ label }}</button>
</template>
<script>
export default {
    props: {
        link: {
            type: Boolean,
            required: false,
            default: false
        },
        label: {
            type: String,
            required: false,
            default: ''
        },
        to: {
            type: String,
            required: false,
            default: '/'
        }
    }
}
</script>
```
💡 link 속성을 붙이게 되면 true 가 되어 router-link 로 분기됩니다.    

### 동적 컴포넌트
> 동그라미 안에는 네모도 세모도 들어가겠죠 ?

```html
<template>
    <button @click="setSelected('A')">A</button>
    <button @click="setSelected('B')">B</button>
    <!-- 동적으로 A 또는 B 컴포넌트를 렌더링 -->
    <component :is="selected"></component>
</template>

<script>
    import A from './components/A.vue';
    import B from './components/A.vue';
    export default () {
        components: {
            A, B
        },
        data() {
            selected: null,
        },
        methods: {
            setSelected(selected) {
                this.selected = selected;
            }
        }
    }
</script>
```

---

### keep-alive
> unmount 되어도 소멸되지 않고 살려두고 싶을 떄

기본적으로 컴포넌트가 `onUpdate` 될 때 DOM의 노드가 제거됩니다.   
vue 는 DOM 노드가 제거되지 않도록 `keep-alive` 태그를 이용하여 캐싱하도록 권장합니다.   

```js
// App.vue
<template>
    <keep-alive>
        <!-- A 컴포넌트의 데이터는 캐싱 될 것-->
        <A />
    </keep-alive>
</template>

// A.vue
// 동적 컴포넌트를 통해 B 컴포넌트로 교체하였을 경우 A 컴포넌트가 제거되므로
// B -> A 로 다시 이동할 때 모든 노드는 새로이 생성되어 사실상 필드의 값은 사라짐
// 허나 keep-alive 태그 아래의 입력 값은 캐싱되게금 할 수 있습니다!
<template>
    <div>
        <input type="text" />
    </div>
</template>
```

### teleport
> 렌더링 되었을 때 특정 DOM에 위치시키기

```html
<!-- teleport 태그는 DOM 이 렌더링 될 때 특정 선택자의 자식태그로 생성되게 합니다. -->
<teleport to="#app">
    <template>
        선택자 아래에 렌더링 될 거야 #app 이니까 id가 app인 html 태그 밑 출력
    </template>
</teleport>
```
💡 vue3 부터 추가된 신기능입니다 !   

---

### scoped
> 부품별 스타일시트

scoped 를 붙이면 그 부품만을 위한 스타일시트가 됩니다.   

```html
<style scoped>
    ...
</style>
```

---

### slot
> 컴포넌트에 HTML 끼워넣기

```html
<!-- A.vue -->
<B>
    <template v-slot:default>
        <h1>슬롯 1</h1>
    </template>
</B>
<!-- B.Vue -->
<template>
    <slot></slot>
</template>
```
💡 만약 slot이 하나라면 default 슬롯이므로 v-slot 지시자를 생략해도 좋습니다.   
💡 이름 없는 슬롯은 자동으로 default 슬롯이 됩니다.   
💡 v-slot 지시자는 `#` 으로 축약 할 수 도 있습니다. `#default`  

```html
<!-- A.vue -->
<B>
    <template v-slot:named1>
        <h1>슬롯1</h1>
    </template>
    <template v-slot:named2>
        <h1>슬롯2</h1>
    </template>
</B>
<!-- B.Vue -->
<template>
    <slot name="named1"></slot>
    <slot name="named2"></slot>
</template>
```
💡 v-slot 지시자를 통해서 어느 슬롯에 노드 앨리먼트를 넣을지 정할 수 있습니다.   

### slotProps
> 슬롯의 데이터 바인딩

```html
<!-- A.vue -->
<B>
    <template v-slot:default="slotProps">
        <h1>{{ slotProps.title }}</h1>
    </template>
</B>
<!-- B.Vue -->
<template>
    <ul>
        <li v-for="book in boks" :key="book.id">
            <slot></slot>
        </li>
    </ul>
</template>

<script>
export default {
    data() {
        return {
            books: [
                {id: 0, title: '미움받을 용기'},
                {id: 1, title: '손자병법'},
            ]
        }
    }
    mounted() {
        // 컴포넌트가 마운트 될 때마다 콘솔을 찍게 될건데
        // 만약, 해당 슬롯에 아무런 템플릿이 안꽂히게 된다면
        // undefined 로 처리됩니다.
        console.log(this.$slots.named1);
        console.log(this.$slots.default);
    }
}
</script>
```

---

### Vue Router
   
Vue Router 버전에 따라 사용법이 상이하겠지만 vue3 기준으로 기본적인 사용방법은 다음과 같습니다.

```js
import {createRouter, createWebHistory} from 'vue-router'
const router = createRouter({
    history: createWebHistory(),
    // 경로 데이터가 들어가는 영역
    routes: [
        ...
    ],
    // router-link 에서 생성되는 a 태그 클래스명을 커스터마이징
    linkActiveClass: 'active',
});

app.use(router)
app.mount('#app');
```

💡 `createRouter` Vue2 에서 `new Router()` 에 해당합니다.    
💡 `createWebHistory` 는 `HTML5` 모드에 해당합니다.    

`routes` 에 경로 들을 할당하면 된다. 우선 간단한 메인 페이지를 예로 들어봅니다.     

```js
/* 
    name:      라우트 객체의 명칭이자 식별키
    redirect:  path 값에서 redirect 값으로 리다이렉트 합니다.
    alias:     alias 값으로 와도 path 값으로 인식하게 합니다.
    meta:      아무 값이나 담아두고 사용 할 수 있습니다. (주로 네비게이션 가드에서 사용)
    component: router-view 에서 보여줄 컴포넌트
*/
{ 
    name: 'root', 
    path: '/home', 
    redirect: '/' 
    alias: 'house', 
    meta: {
        first_name: 'yuu2dev',
        last_name: 'YU',
    },
    component: HomeComponent,
},

```
```html 
<template>
    <nav>   
        <router-link to="/home"><router-link>
    </nav>
    <main>
        <router-view></router-view>
    </main>
</template>
```

한 편, URL 중에서 (product/101, product/102) ... 와 같은 형태를 가진 동적으로 생성되는 페이지들도 있습니다.    
흔히 상세 페이지라고들 하는데 끝자락의 숫자는 동적으로 변하는 ID 일 것입니다.   
다음과 같은 페이지들은 어떻게 설정해야 할까요 ?   

```js
/*
    props: 파라미터(params) 에 해당하는 값(:id)을 props로 받을지 여부.
    components: 여러개의 router-view 를 구성 할 때 사용
                ex). <router-view name="category"></router-view>
*/
{
    name: 'product-detail',
    path: '/product/:id',
    components: {
        default: ProductDetail,
        category: CategoryList,
    },
    // id 를 받아야하니 꼭 설정 해야 합니다 !
    props: true,
}
```

router-view 가 컴포넌트를 렌더링 하는 것을 알고 있습니다.   
`children` 에 속하는 컴포넌트들은 어떻게 렌더링 해주어야 할까요 ?   
그건 바로 부모컴포넌트 템플릿에서 한번 더 router-view 태그를 선언해야 합니다.    

```js
{ 
    name: 'home', 
    path: '/home', 
    component: HomeComponent,

    children: [
        { name: 'product-list', path: '/products', component: ProductList },
        { name: 'category-list', path: '/categories', component: CategoryList },
    ],
},

```

한 편, 라우트 변경시 스크롤을 제어할 때 유용한 기술도 있습니다 !    

```js
const router = createRouter({
    routes: [
        ...
    ],
    scrollBehavior(to, from, savedPosition) {
        // 뒤로가기를 할 경우 savedPosition 가 존재 할 것. 이 경우 스크롤 위치로 이동
        if (savedPosition) {
            return savedPosition;
        }
        return { left: 0, top: 0 }; // 아니면 상단으로 이동
    }
})
```

#### Navigation Guard

접근을 제어 할 때 주로 사용합니다. 전역 제어는 `beforeEach` `afterEach` 을 사용합니다.

```js
const router = createRouter({ ... });
// 라우트가 변경되기 전 동작
router.beforeEach((to, from, next) => {
    to.name === 'secret' ? next(false) : next(true);
});
// 라우트가 변경된 후 동작
router.afterEach((to, from) => {});
```

경로마다 다르게 사용 할 수도 있을 것입니다.   

```js
routes:[
    {
        name: 'secret',
        path: '/secret'
        ...
        beforeEnter: (to, from, next) => {
            // ...
        },
    }
]
```
더 나아가 지역 컴포넌트 내부에서도 정의 할 수 있습니다.   
`beforeRouteEnte` `beforeRouteUpdate` `beforeRouteLeave`

```js
export default {
    // 라우트가 생성되어 진입 직전
    beforeRouteEnter() {
        console.log('before route enter');
    },
    // 라우트가 변경되기 전
    beforeRouteUpdate() {
        console.log('before route update');
    },
    // 다른 페이지로 이동하기전
    beforeRouteLeave(to, from, next) {
        console.log('before route leave');
    },
},

```

### Transition

`transition` 지시자를 이용해서 css의 애니매이션과 트랜지션을 다룰 수 있습니다.   

```html
<transition>
    <h1>Hello Vue.js</h1>
</transition>
```

애니매이션에는 생명주기가 존재합니다. beforeMount -> mounted -> beforeUnmount -> mounted    
순으로 엘리먼트가 생성되었다가 사라지는 것은 기존에 알고있을 있습니다.         
각 화살표에 해당하는 지점 사이에서 애니매이션이 동작하게 되는데 이를 위한 특별한 클래스명이 존재합니다.    
그것은 바로 `v-enter-` 와 `v-leave-` 입니다.   

``` html
<style scoped>
    /* mount 가 되지 않았을 때 (시작) */
    .v-enter-from {
    }
    /* mount 될 때 까지 (시작 - 끝) */
    .v-enter-active {
        animation: my-animation 0.5s ease-out forwards;
    }
    /* mount 가 되기 직전 (끝) */
    .v-enter-to {
    }
    /* unmount 가 되지 않았을 때 (시작) */
    .v-leave-from {
    }
    /* unmount 될 때 까지 (시작 - 끝) */
    .v-leave-active {
        animation: my-animation 0.5s ease-in;
    }
    /* unmount 가 되기 직전 (끝) */
    .v-leave-to {
    }
</style>
```

transtion 지시자의 속성으로 _**name**_ 에 값을 건내면 특별한 트랜지션을 만들 수 있습니다.      
그리고 스타일시트에서는 name 으로 시작하는 생명주기 클래스를 추가해야 합니다.   
예를 들어, 아래의 예시처럼 name 을 yuu2dev 으로 하였을 경우 yuu2dev-enter-* 또는 yuu2dev-leave-*을 만들어서 트랜지션을 동작하게 할 수 있다.   

```html
<transition name="yuu2dev">
    <h1>내 이름은 yuu2dev</h1>
</transtion>

<style scoped>
    .yuu2dev-enter-active {
        animation: measang 0.3s ease-out forwards;
    }
    .yuu2dev-leave-active {
        animation: measang 0.3s ease-in;
    }
    @keyframes measang {
        0% {
            transform: translateY(0) scale(1);
        }
        100% {
            transform: translateY(100px) scale(2);
        }
    }
</style>
```

그리고 직접 속성에다가 클래스명을 넣어주는 방법도 있습니다.

```html
<transition 
    enter-acitve-class="yuu2dev-enter-active" 
    leave-active-class="yuu2dev-leave-active"
>
    <h1>내 이름은 yuu2dev</h1>
</transition>
```

트랜지션은 기본적으로 여러개의 자식에 적용 할 수 없습니다. 오직 한개만 적용 가능합니다.

```html
<transition 
    enter-acitve-class="yuu2dev-enter-active" 
    leave-active-class="yuu2dev-leave-active"
>
    <h1>내 이름은 yuu2dev</h1>
    <h1>h1 태그가 두개이니 트랜지션이 적용되지 않아</h1>
</transition>
```

분기가 있다면 자식요소를 여러개가 있어도 vue.js 가 알아서 판단해줍니다.

```html
<transition 
    enter-acitve-class="yuu2dev-enter-active" 
    leave-active-class="yuu2dev-leave-active"
>
    <h1 v-if="true">내 이름은 민상</h1>
    <h1 v-else>분기여도 괜찮아</h1>
</transition>
```

💡 `v-on:css` 트랜지션에 CSS 를 적용할지 말지 결정합니다. `true|false`   
💡 `v-on:mode` 만약 enter 애니메이션과 leave 애니메이션을 서로 변경해야 할 상황이 생긴다면 mode 속성을 사용하면 됩니다.   
mode 속성은 `in-out` 과  `out-in` 이 있는데 in-out은 enter 애니메이션을 먼저 수행 한 후 leave 애니매이션을 수행한다는 의미이고 out-in 은 그 반대로 이해하면 됩니다.

```html
<transition 
    enter-acitve-class="yuu2dev-enter-active" 
    leave-active-class="yuu2dev-leave-active"
    mode="out-in" 
>
    <h1 v-if="true">내 이름은 민상</h1>
    <h1 v-else>분기여서 괜찮아 그리고 leave 를 수행한 후 enter 를 수행하게 될거야</h1>
</transition>
```

트랜지션 사이클에서 스크립트를 실행 시켜야 할 때도 있을겁니다.    
그 때, 다음과 같은 이벤트들을 바인딩합니다.  예를 들면, before-enter 는 시작하기 직전에 스크립트를 실행 시킬 수 있습니다.   

```html
<transtion 
  @before-enter="beforeEnter"
  @enter="enter"
  @after-enter="afterEnter"
  @enter-cancelled="enterCancelled"

  @before-leave="beforeLeave"
  @leave="leave"
  @after-leave="afterLeave"
  @leave-cancelled="leaveCancelled"
>
</transtion>
```

### transition-group

`<transition-group>` 은 여러 개의 요소들에 트랜지션을 적용할 때 사용합니다.   

```html
<transtion-group tag="ul" name="prod-list">
    <li v-for="product in products" :key="product.id">{{ product.name }}</li>
</transition-group>

<style scoped>
    .prod-list-enter-from { opacity: 0; }
    .prod-list-enter-active { transition: all 1s ease-out; }
    .prod-list-enter-to { opacity: 1; }
</style>
```

단일 컴포넌트인 transition 은 DOM 에서 렌더링되지 않으나 transition-group 은 DOM 에서 렌더링된다는 특징을 가지고 있습니다.         
`tag` 속성은 부모 태그를 생략할 수 있습니다. 예를 들어, li 요소의 래퍼태그인 ul 을 지정하면 transition-group 바깥에 ul 태그를 지정하지 않아도 됩니다.   
 
## Vuex
> 전역상태 관리도구

state 는 즉, 데이터를 뜻합니다. state 에는 지역 (local)과 전역 (global)으로 구분 지을 수 있는데 
지역 상태는 오직 하나의 컴포넌트만 영향을 끼칩니다. 예를 들면, 입력한 데이터라던가 모달을 열고 닫는 등은 지역 상태 일 수 있습니다.      

*왜, Vuex 를 써야 하나요 ?*
      
첫 째, `무거운 컴포넌트 방지` 컴포넌트를 개발함에 있어 가벼움을 중시해야합니다. 좋지 않은 예는 하나의 컴포넌트 안에 수 많은 데이터가 포함될 경우입니다.   
둘 째, `예측 불가 데이터`  매번 변경된 데이터를 가져올 수 있는지 명확하지않습니다.   
셋 째, `에러 가능성` 코딩하면서 다른 컴포넌트에 미처 상태를 업데이트 하지 못 할 가능성이 있습니다.   

#### mappers
> vuex 기능을 구조분해할당

```js
export default {
    computed: {
        ...mapGetters([GETTER1, GETTER2])
    },
    methods: {
        ...mapActions([ACTION1, ACTION2])
    }
}
```

#### modules
> 전역상태 데이터를 분할하여 관리  

```js
const createStore({
    namespaced: true,
    modules: {
        yuu2dev
    },
    ...
})
```
하나의 스토어에서 모든 것을 관리하기에는 유지보수 차원에서 어려운 일입니다.   
그래서 스토어는 여러개로 분할하여 모듈 형식으로 합칠 수 있으며 스토어 계층간에 이름 `namespaced` 도 설정 할 수 있습니다.    

```js
export default {
    computed: {
        ...mapGetters('yuu2dev', [GETTER1, GETTER2])
    },
    methods: {
        ...mapActions('yuu2dev', [ACTION1, ACTION2]),
        testNameSpaceAction() {
            this.$store.dispatch('yuu2dev/hahaha')
        }
    }
}
```
